"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { ChevronLeft, Plus, Calendar, ArrowUp, Bot, X, Hand, Trash2 } from "lucide-react"
import { DraggableTextBox } from '@/components/DraggableTextBox';
import { AssignmentBox } from '@/components/AssignmentBox';
import { AssignmentForm, AssignmentData } from '@/components/AssignmentForm';
import { TimelineCalendar } from '@/components/TimelineCalendar';
import Link from "next/link"
import { useParams } from "next/navigation"

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  functionCall?: any;
  functionResult?: any;
  pending?: boolean;
}

function AIChatbot({ isOpen, onClose, width, onResize, onCreateAssignment }: { 
  isOpen: boolean; 
  onClose: () => void; 
  width: number;
  onResize: (newWidth: number) => void;
  onCreateAssignment: (assignmentData: AssignmentData, files: File[]) => void;
}) {
  const [message, setMessage] = useState("");
  const [files, setFiles] = useState<File[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const dividerRef = useRef<HTMLDivElement>(null);
  const isDraggingRef = useRef(false);
  
  useEffect(() => {
    if (!isOpen) return;
    
    const handleMouseDown = () => {
      isDraggingRef.current = true;
      document.body.style.userSelect = 'none';
    };
    
    const handleMouseUp = () => {
      isDraggingRef.current = false;
      document.body.style.userSelect = '';
    };
    
    const handleMouseMove = (e: MouseEvent) => {
      if (!isDraggingRef.current) return;
      
      // Calculate from right edge of window
      const newWidth = window.innerWidth - e.clientX;
      if (newWidth > 300 && newWidth < window.innerWidth * 0.7) {
        onResize(newWidth);
      }
    };
    
    const divider = dividerRef.current;
    divider?.addEventListener('mousedown', handleMouseDown);
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('mousemove', handleMouseMove);
    
    return () => {
      divider?.removeEventListener('mousedown', handleMouseDown);
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isOpen, onResize]);
  
  // Scroll to bottom of chat when messages change
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);
  
  // Function to send message to Gemini API
  const sendMessageToGemini = async (messageText: string, attachedFiles: File[]) => {
    try {
      // Add user message to chat
      setMessages(prev => [...prev, {
        role: 'user',
        content: messageText,
        timestamp: new Date()
      }]);
      
      // Add a pending message for the assistant
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: '...',
        timestamp: new Date(),
        pending: true
      }]);
      
      setIsLoading(true);
      
      // Create form data for API call
      const formData = new FormData();
      formData.append('message', messageText);
      
      // Append files if any
      attachedFiles.forEach(file => {
        formData.append('files', file);
      });
      
      // Call Gemini API
      const response = await fetch('/api/gemini', {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }
      
      const data = await response.json();
      
      // Remove the pending message
      setMessages(prev => prev.filter(msg => !msg.pending));
      
      // Process function calls if any
      if (data.functionCalls && data.functionCalls.length > 0) {
        // Add the assistant's response with function calls
        setMessages(prev => [...prev, {
          role: 'assistant',
          content: data.text,
          timestamp: new Date(),
          functionCall: data.functionCalls[0]
        }]);
        
        // Check if createAssignment function was called
        const createAssignmentCall = data.functionCalls.find(
          (call: any) => call.name === 'createAssignment'
        );
        
        if (createAssignmentCall && data.functionResults) {
          // Process the result of the function call
          const functionResult = data.functionResults.find(
            (result: any) => result.name === 'createAssignment'
          );
          
          if (functionResult && functionResult.result.success) {
            const assignmentDetails = functionResult.result.assignmentDetails;
            
            // Add a message showing the result
            setMessages(prev => [...prev, {
              role: 'assistant',
              content: `I've created the assignment "${assignmentDetails.name}" for you.`,
              timestamp: new Date(),
              functionResult: functionResult.result
            }]);
            
            // Convert dates to the format expected by the assignment form
            const assignmentData: AssignmentData = {
              name: assignmentDetails.name,
              startDate: assignmentDetails.startDate,
              endDate: assignmentDetails.endDate,
              description: assignmentDetails.description || '',
              files: attachedFiles
            };
            
            // Call the parent function to create the assignment
            onCreateAssignment(assignmentData, attachedFiles);
          }
        }
      } else {
        // Just add the text response if no function calls
        setMessages(prev => [...prev, {
          role: 'assistant',
          content: data.text,
          timestamp: new Date()
        }]);
      }
    } catch (error) {
      console.error('Error sending message to Gemini:', error);
      
      // Remove the pending message
      setMessages(prev => prev.filter(msg => !msg.pending));
      
      // Add error message
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: 'Sorry, I encountered an error processing your request. Please try again.',
        timestamp: new Date()
      }]);
    } finally {
      setIsLoading(false);
    }
  };
  
  if (!isOpen) return null;

  return (
    <div 
      className="fixed top-16 right-0 bottom-0 bg-white border-l border-gray-200 flex flex-col"
      style={{ width: `${width}px` }}
    >
      {/* Draggable Divider */}
      <div 
        ref={dividerRef}
        className="absolute left-0 top-0 bottom-0 w-2 bg-gray-200 hover:bg-forest-300 transition-colors cursor-ew-resize z-10"
      />
      
      {/* Header */}
      <div className="p-6 pb-2">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-semibold text-gray-900">AI Assistant</h2>
          <Button variant="ghost" size="icon" className="h-9 w-9 p-1 hover:bg-gray-100 rounded-lg" onClick={onClose}>
            <X className="h-5 w-5" />
            <span className="sr-only">Close</span>
          </Button>
        </div>
      </div>
      
      {/* Main Chat Area Layout */}
      <div className="flex-1 flex flex-col">
        {/* Chat Content */}
        <div ref={chatContainerRef} className="flex-1 overflow-y-auto px-6 py-4 space-y-4">
          {messages.length === 0 ? (
            <div className="text-center text-gray-500 my-8">
              <p>Ask me to create assignments for you!</p>
              <p className="text-sm mt-2">Try: "Create an assignment called Introduction to Programming from May 20 to May 25 about basic programming concepts"</p>
            </div>
          ) : (
            messages.map((msg, index) => (
              <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-[80%] rounded-lg p-3 ${msg.role === 'user' 
                  ? 'bg-forest-100 text-forest-800' 
                  : 'bg-gray-100 text-gray-800'}`}
                >
                  {msg.pending ? (
                    <div className="flex space-x-1 items-center">
                      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0ms' }}></div>
                      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '150ms' }}></div>
                      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '300ms' }}></div>
                    </div>
                  ) : (
                    <div>
                      <div className="whitespace-pre-wrap">{msg.content}</div>
                      {msg.functionResult && (
                        <div className="mt-2 p-2 bg-green-50 border border-green-100 rounded text-xs text-green-700">
                          Assignment created successfully!
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
        
        {/* Input Area - Split layout with text input and send button side by side */}
        <div className="p-6 pt-4 border-t border-gray-100">
        {/* Display selected files */}
        {files.length > 0 && (
          <div className="mb-2 p-2 bg-forest-50 rounded-lg border border-forest-100">
            <div className="flex items-center justify-between mb-1">
              <span className="text-xs font-medium text-forest-700">{files.length} file{files.length > 1 ? 's' : ''} selected</span>
              <Button 
                size="sm" 
                variant="ghost" 
                className="h-5 w-5 p-0" 
                onClick={() => setFiles([])}
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
            <div className="flex flex-wrap gap-1">
              {files.map((file, index) => (
                <div key={index} className="text-xs px-2 py-1 bg-white rounded border border-forest-100 flex items-center">
                  <span className="truncate max-w-[120px]">{file.name}</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    className="h-4 w-4 p-0 ml-1" 
                    onClick={() => setFiles(files.filter((_, i) => i !== index))}
                  >
                    <X className="h-2.5 w-2.5" />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        )}
        
        <div className="relative">
          {/* Hidden file input */}
          <input
            type="file"
            ref={fileInputRef}
            className="hidden"
            multiple
            onChange={(e) => {
              if (e.target.files && e.target.files.length > 0) {
                setFiles(prev => [...prev, ...Array.from(e.target.files || [])]);
              }
            }}
          />
          
          {/* Message input and buttons in a side-by-side layout */}
          <div className="flex gap-2 items-end">
            {/* Main text input area with drag-and-drop */}
            <div 
              className={`flex-1 bg-gray-100 rounded-2xl p-4 min-h-[60px] max-h-40 relative ${isDragging ? 'border-2 border-forest-400 bg-forest-50' : ''}`}
              onDragOver={(e) => {
                e.preventDefault();
                setIsDragging(true);
              }}
              onDragLeave={() => setIsDragging(false)}
              onDrop={(e) => {
                e.preventDefault();
                setIsDragging(false);
                if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
                  setFiles(prev => [...prev, ...Array.from(e.dataTransfer.files)]);
                }
              }}
            >
              <textarea
                placeholder={isDragging ? "Drop files here..." : "Message AI Assistant..."}
                className="chat-textarea w-full bg-transparent border-none outline-none text-gray-800 placeholder-gray-500 resize-none min-h-[32px] max-h-32 overflow-y-scroll scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent"
                rows={1}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                style={{ lineHeight: '1.5', maxHeight: '120px' }}
                onInput={(e) => {
                  e.currentTarget.style.height = 'auto';
                  e.currentTarget.style.height = Math.min(e.currentTarget.scrollHeight, 120) + 'px';
                }}
                autoFocus
              />
              {isDragging && (
                <div className="absolute inset-0 flex items-center justify-center bg-forest-50/70 rounded-2xl pointer-events-none">
                  <p className="text-forest-700 font-medium">Drop files here</p>
                </div>
              )}
            </div>
            
            {/* Buttons side-by-side with input */}
            <div className="flex flex-col gap-2 mb-1.5">
              {/* Paperclip Button */}
              <Button 
                type="button"
                size="icon" 
                className="h-8 w-8 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700"
                onClick={() => fileInputRef.current?.click()}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48" />
                </svg>
                <span className="sr-only">Attach files</span>
              </Button>
              
              {/* Send Button */}
              <Button 
                type="button"
                size="icon" 
                className="h-8 w-8 rounded-full bg-forest-600 hover:bg-forest-700 text-white"
                disabled={isLoading}
                onClick={() => {
                  if (message.trim() || files.length > 0) {
                    // Send message to Gemini API
                    sendMessageToGemini(message, files);
                    setMessage("");
                    setFiles([]);
                    setIsDragging(false); // Reset dragging state
                    
                    // Reset textarea height
                    const textarea = document.querySelector('.chat-textarea') as HTMLTextAreaElement;
                    if (textarea) {
                      textarea.style.height = 'auto';
                    }
                  }
                }}
              >
                <ArrowUp className="h-4 w-4" />
                <span className="sr-only">Send message</span>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function TimelinePage() {
  const [isChatOpen, setIsChatOpen] = useState(true)
  const [chatWidth, setChatWidth] = useState(400) // Default width, will be updated in useEffect
  const [selectedTool, setSelectedTool] = useState<string | null>(null);
  const [textBoxes, setTextBoxes] = useState<Array<{
    id: string;
    text: string;
    position: { x: number; y: number };
    assignmentData?: AssignmentData;
  }>>([]);
  const [selectedBoxId, setSelectedBoxId] = useState<string | null>(null);
  const [isCalendarOpen, setIsCalendarOpen] = useState(false);
  const [isAssignmentFormOpen, setIsAssignmentFormOpen] = useState(false);
  const [isEditingAssignment, setIsEditingAssignment] = useState(false);
  const [editingAssignmentId, setEditingAssignmentId] = useState<string | null>(null);
  const [formPosition, setFormPosition] = useState({ x: 0, y: 0 });
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Set initial width to 30% of viewport width, but not less than 300px
    setChatWidth(Math.max(300, Math.floor(window.innerWidth * 0.3)));
  }, [])
  const params = useParams()
  const className = Array.isArray(params.className) ? params.className[0] : params.className || ''

  const handleToolClick = (tool: string) => {
    if (tool === 'calendar') {
      // Toggle calendar
      setIsCalendarOpen(!isCalendarOpen);
      setSelectedTool(null);
    } else if (tool === 'add') {
      // Show the form without enabling add mode
      setIsAssignmentFormOpen(true);
      setSelectedTool(null);
    } else {
      // If selecting a new tool, close the calendar
      if (isCalendarOpen && tool !== selectedTool) {
        setIsCalendarOpen(false);
      }
      // Toggle the selected tool
      setSelectedTool(tool === selectedTool ? null : tool);
    }
  };

  const TOOLBAR_BOTTOM = 56; // 1.5rem (top-6) + 2.5rem (h-10) + 0.5rem (toolbar margin)
  const handleContainerClick = (e: React.MouseEvent) => {
    if (selectedTool === 'add' && containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      if (y > TOOLBAR_BOTTOM) { // Only allow below toolbar
        setFormPosition({ x, y });
        setIsAssignmentFormOpen(true);
        setSelectedTool(null);
      }
    }
  };
  
  const handleSaveAssignment = (assignmentData: AssignmentData) => {
    if (isEditingAssignment && editingAssignmentId) {
      // Update existing assignment
      setTextBoxes(prev => 
        prev.map(box => 
          box.id === editingAssignmentId 
            ? { ...box, text: assignmentData.name, assignmentData }
            : box
        )
      );
      setIsEditingAssignment(false);
      setEditingAssignmentId(null);
    } else {
      // Create new assignment
      // Add 100px to the right and 100px down from left corner
      const positionX = 100; // 100px from the left
      const positionY = TOOLBAR_BOTTOM + 100; // 100px below the toolbar

      setTextBoxes(prev => [
        ...prev,
        {
          id: Date.now().toString(),
          text: assignmentData.name,
          position: { x: positionX, y: positionY },
          assignmentData
        }
      ]);
    }
    
    setIsAssignmentFormOpen(false);
  };
  
  const handleEditAssignment = (id: string) => {
    const assignmentToEdit = textBoxes.find(box => box.id === id && box.assignmentData);
    if (assignmentToEdit && assignmentToEdit.assignmentData) {
      setEditingAssignmentId(id);
      setIsEditingAssignment(true);
      setIsAssignmentFormOpen(true);
    }
  };


  const updateTextBoxPosition = (id: string, position: { x: number; y: number }) => {
    setTextBoxes(prev =>
      prev.map(box =>
        box.id === id ? { ...box, position } : box
      )
    );
  };

  const updateTextBoxText = (id: string, text: string) => {
    setTextBoxes(prev =>
      prev.map(box =>
        box.id === id ? { ...box, text } : box
      )
    );
  };

  return (
    <div
      ref={containerRef}
      className="grid-dots-bg min-h-screen relative"
      onClick={handleContainerClick}
      style={{ cursor: selectedTool === 'add' ? 'crosshair' : selectedTool === 'hand' ? 'grab' : 'default', minHeight: '100vh' }}
    >
      {/* Back Button */}
      <div className="absolute left-6 top-6 z-10">
        <Button
          asChild
          variant="outline"
          size="icon"
          className="h-10 w-10 rounded-lg bg-white/80 backdrop-blur-sm hover:bg-white shadow-sm"
        >
          <Link href={`/instructor/${className}`}>
            <ChevronLeft className="h-5 w-5" />
            <span className="sr-only">Back</span>
          </Link>
        </Button>
      </div>

      {/* Floating Toolbar - Centered, with smooth shift when sidebar is open */}
      <div
        className="absolute left-1/2 top-6 z-10 -translate-x-1/2 transition-transform duration-200"
        style={{
          transform: `translateX(-50%)${isChatOpen ? ` translateX(-${chatWidth/2}px)` : ''}`
        }}
      >
        <div className="flex items-center gap-2 bg-white/80 backdrop-blur-sm p-1.5 rounded-lg shadow-sm border border-gray-200">
          <Button 
            variant="ghost" 
            size="sm" 
            className={`h-9 w-9 p-0 rounded-lg ${selectedTool === 'add' ? 'bg-gray-200' : 'hover:bg-gray-100'}`}
            onClick={() => handleToolClick('add')}
            title="Add Text Box"
          >
            <Plus className="h-4 w-4 text-gray-700" />
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            className={`h-9 w-9 p-0 rounded-lg ${selectedTool === 'hand' ? 'bg-gray-200' : 'hover:bg-gray-100'}`}
            onClick={() => handleToolClick('hand')}
            title="Hand"
          >
            <Hand className="h-4 w-4 text-gray-700" />
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            className={`h-9 w-9 p-0 rounded-lg ${isCalendarOpen ? 'bg-gray-200' : 'hover:bg-gray-100'}`}
            title="Calendar"
            onClick={() => handleToolClick('calendar')}
          >
            <Calendar className="h-4 w-4 text-gray-700" />
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            className={`h-9 w-9 p-0 rounded-lg ${selectedTool === 'delete' ? 'bg-rose-100 text-rose-600' : 'hover:bg-rose-50 text-rose-500 hover:text-rose-600'}`}
            title="Delete"
            onClick={() => setSelectedTool(selectedTool === 'delete' ? null : 'delete')}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* AI Toggle Button */}
      <div className="absolute right-6 top-6 z-10">
        <Button
          variant="ghost"
          size="sm"
          className={`h-10 w-10 p-0 bg-white/80 backdrop-blur-sm shadow-sm border border-gray-200 transition-colors ${
            isChatOpen ? 'bg-forest-50 border-forest-200' : 'hover:bg-gray-100'
          }`}
          onClick={() => setIsChatOpen(!isChatOpen)}
          aria-label="Toggle AI Assistant"
        >
          <Bot className={`h-4 w-4 ${isChatOpen ? 'text-forest-600' : 'text-gray-700'}`} />
        </Button>
      </div>

      {/* Render text boxes */}
      {textBoxes.map(box => (
        box.assignmentData ? (
          <AssignmentBox
            key={box.id}
            id={box.id}
            initialPosition={box.position}
            assignmentData={box.assignmentData}
            onDragEnd={position => updateTextBoxPosition(box.id, position)}
            selected={selectedBoxId === box.id}
            onSelect={() => setSelectedBoxId(box.id)}
            onDelete={() => setTextBoxes(prev => prev.filter(b => b.id !== box.id))}
            onEdit={handleEditAssignment}
            handMode={selectedTool === 'hand'}
            deleteMode={selectedTool === 'delete'}
          />
        ) : (
          <DraggableTextBox
            key={box.id}
            initialPosition={box.position}
            initialText={box.text}
            onDragEnd={position => updateTextBoxPosition(box.id, position)}
            onBlur={text => updateTextBoxText(box.id, text)}
            selected={selectedBoxId === box.id}
            onSelect={() => setSelectedBoxId(box.id)}
            onDelete={() => setTextBoxes(prev => prev.filter(b => b.id !== box.id))}
            handMode={selectedTool === 'hand'}
            deleteMode={selectedTool === 'delete'}
          />
        )
      ))}

      {/* Main Content Area - Resizes based on chat panel */}
      <div 
        className="min-h-screen transition-all duration-300"
        style={{
          marginRight: isChatOpen ? `${chatWidth}px` : '0',
          paddingTop: isCalendarOpen ? '4rem' : '6rem'
        }}
      >
        {isCalendarOpen ? (
          <TimelineCalendar 
            isOpen={isCalendarOpen} 
            onClose={() => setIsCalendarOpen(false)} 
          />
        ) : (
          <div className="p-8">
            {/* Other content goes here when calendar is not shown */}
          </div>
        )}
      </div>

      {/* AI Chatbot */}
      <AIChatbot 
        isOpen={isChatOpen} 
        onClose={() => setIsChatOpen(false)} 
        width={chatWidth}
        onResize={setChatWidth}
        onCreateAssignment={(assignmentData, uploadedFiles) => {
          // Add 100px to the right and 100px down from left corner
          const positionX = 100; // 100px from the left
          const positionY = TOOLBAR_BOTTOM + 100; // 100px below the toolbar

          setTextBoxes(prev => [
            ...prev,
            {
              id: Date.now().toString(),
              text: assignmentData.name,
              position: { x: positionX, y: positionY },
              assignmentData
            }
          ]);
        }}
      />

      {/* Assignment Form Popup */}
      <AssignmentForm
        isOpen={isAssignmentFormOpen}
        onClose={() => {
          setIsAssignmentFormOpen(false);
          setIsEditingAssignment(false);
          setEditingAssignmentId(null);
        }}
        onSave={handleSaveAssignment}
        initialData={isEditingAssignment && editingAssignmentId
          ? textBoxes.find(box => box.id === editingAssignmentId)?.assignmentData
          : undefined
        }
        isEditing={isEditingAssignment}
      />
    </div>
  )
}
